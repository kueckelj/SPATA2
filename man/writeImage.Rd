% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/w.R
\name{writeImage}
\alias{writeImage}
\alias{writeImage,SPATA2-method}
\alias{writeImage,SpatialData-method}
\alias{writeImage,HistoImage-method}
\title{Write image to disk}
\usage{
writeImage(object, ...)

\S4method{writeImage}{SPATA2}(
  object,
  img_name,
  img_dir,
  overwrite = FALSE,
  transform = FALSE,
  verbose = NULL
)

\S4method{writeImage}{SpatialData}(
  object,
  img_name,
  img_dir,
  overwrite = FALSE,
  transform = FALSE,
  verbose = TRUE
)

\S4method{writeImage}{HistoImage}(
  object,
  img_dir,
  overwrite = FALSE,
  transform = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{...}{Additional arguments passed to \code{EBImage::writeImage}.}

\item{img_name}{A character string specifying the name of the image.}

\item{img_dir}{A character string specifying the directory where the image should be saved. If \code{NULL},
the image is written to the current image directory as obtained by \code{\link[=getImageDir]{getImageDir()}}.}

\item{overwrite}{Logical. If \code{TRUE}, existing files with the same name in the specified directory will be overwritten.}

\item{transform}{Logical value. If \code{TRUE}, image transformations defined during
\code{alignImage()} and/or \code{alignImageInteractive()} are applied before saving the image.

Defaults to \code{FALSE}. Only set to \code{TRUE} if you \strong{do not} reassign the object after the function call.
If \code{transform} is \code{TRUE} and you reassign the object, the transformed image will be saved, but the
object itself will not reflect these changes (e.g., the transformation will not be undone in the object).
This can lead to discrepancies between the saved image and the objectâ€™s internal state.}

\item{verbose}{Logical. If \code{TRUE}, informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}
}
\value{
As pointed out in details, this function can be used to just write an image to disk while simultaneously storing the results
in the respective object. After the image is successfully written to disk, the respective object, updated
in terms of image directory and resize factor, is returned \strong{invisibly}. See examples.
}
\description{
The \code{writeImage} method writes an image to a specified directory.
}
\details{
The \code{writeImage()} function writes the image associated with the specified \code{img_name} to the given
directory \code{img_dir}.

\strong{Setting \code{resize_fct} to \code{NULL}:}

After the image is written to the specified directory,
the \code{resize_fct} transformation is set to \code{NULL}. This is to prevent an ever-decreasing reduction
in image size since the factor is typically applied when the image is loaded into the object. If this
factor is not reset after writing the image, subsequent loading and writing cycles would continually
reduce the image size.

\strong{Differences in Assigning the Object:}

The difference between using \code{object <- writeImage(object)} and simply calling \code{writeImage(object)} lies
in the handling of the \code{img_dir} slot in the \code{HistoImage} class:
\itemize{
\item \strong{\code{object <- writeImage(object, ...)}}: When you assign the result of the \code{writeImage} call back to the \code{object},
the function updates the \code{dir} slot with the directory path \code{img_dir} where the
image was written. This ensures that the object now knows the location of its saved image,
which can be useful for tracking and future references.
\item \strong{\code{writeImage(object, ...)} without assignment}: If you do not reassign the \code{object}, the image
is still written to the specified directory, but the \code{dir} slot within the \code{HistoImage} object is not updated -
because the updates were not reassigned.
}
}
\examples{

library(SPATA2)
library(SPATAData)

object <- downloadSpataObject("UKF313T")

# contains two images
getImageNames(object)

img_name <- "hires"
img_dir <- "my/new/image_directory.png"

# Example 1: Basic usage, save the image and update the object
object <- writeImage(object, img_name = img_name, img_dir = img_dir, overwrite = TRUE)
# The object now knows the location of the saved image.

# Example 2: Save the image without updating the object
writeImage(object, img_name = img_name, img_dir = img_dir, overwrite = TRUE)
# The image is saved, but the object does not update its internal directory reference.

# Example 3: Apply transformations before saving (but do not reassign the object)
writeImage(object, img_name = img_name, img_dir = img_dir, overwrite = TRUE, transform = TRUE)
# The image is saved with the transformations applied, but since we did not reassign,
# the object does not reflect these transformations internally.

# Example 4: Apply transformations and update the object
object <- writeImage(object, img_name = img_name, img_dir = img_dir, overwrite = TRUE, transform = TRUE)
# The image is saved with transformations applied, and the object is updated with the new directory and resize factor.

}
