% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/v3_1_0.R
\name{computeCaptureArea}
\alias{computeCaptureArea}
\alias{computeCaptureArea,SPATA2-method}
\alias{computeCaptureArea,SpatialData-method}
\title{Compute capture area}
\usage{
computeCaptureArea(object, ...)

\S4method{computeCaptureArea}{SPATA2}(object, ...)

\S4method{computeCaptureArea}{SpatialData}(object, ...)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{...}{Used to absorb deprecated arguments or functions.}
}
\value{
The updated input object, containing the added, removed or computed results.
}
\description{
Computes and updates the capture area (field of view).
}
\details{
The \code{computeCaptureArea} function calculates the capture area for the spatial data based
on the specific method used. The process differs slightly depending on whether the
spatial method is a Visium platform or another type:

\itemize{
\item For Visium platforms:
\itemize{
\item The coordinates data frame is first ensured to be complete using \code{complete_visium_coords_df}.
\item A buffer is added around the capture area to account for the physical spacing between capture areas, calculated using the center-to-center distance (\code{CCD}).
\item The capture area is defined by the four corners (vertices) of the bounding box around the coordinates, adjusted by the buffer.
}
\item For non-Visium platforms:
\itemize{
\item The capture area is calculated as the range of the x and y coordinates, defining a simple bounding box.
}
}

After computing the capture area, it is stored in the \verb{@capture_area} slot of the \code{\link{SpatialData}}.
}
