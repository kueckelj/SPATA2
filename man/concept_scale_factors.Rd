% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concept-documentation.R
\name{concept_scale_factors}
\alias{concept_scale_factors}
\title{Scale Factors}
\description{
This document provides an overview of how scale factors are utilized
in SPATA2.

With scale factors we refer to numeric values that are used to multiply the original
x- and y-coordinates of the object's observations with in order to align them
with an image or to bring them into a coordinates system measured in SI units (or both).

Both, S4 class \code{\link{SpatialData}} and \code{\link{HistoImage}} contain a slot named @scale_factors.
In both cases it is a named list. As outlined below, scale factors are primarily
used to ensure alignment between the image and the coordinates. Therefore,
if @slot images of the \code{SpatialData} object contains at least one
\code{HistoImage}, @slot scale_factors in \code{SpatialData} is not required and will be empty.

There are scenarios in which scale factors are required despite the absence
of images, therefore the slot exists in the \code{SpatialData} class.
}
\section{Image alignment - scale factor \emph{image}}{

In case of spatial methods with an image in the background of the observations the
x- and y-coordinates of these observations must be aligned to the image resolution
of the respective image. \code{\link{SPATA2}} objects allow to store multiple images simultaneously and
as they might differ in resolutions, different scale factors are required to scale
the coordinates of the observations appropriately, such that image and coordinates
align perfectly. This is what happens in the background when you extract or plot
the observations in the light of the resolution of image \emph{lowres_image} (assuming
that you have an image stored in your object hat is named that way):

\code{coords_df <- getCoordsDf(object)}

\code{csf <- getScaleFactor(object, img_name = "lowres_image", fct_name = "image")}

\code{coords_df$x <- coords_df$x_orig * csf}

\code{coords_df$y <- coords_df$y_orig * csf}

If the object does \strong{not} contain an image, e.g. for \code{\link{MERFISH}} or \code{\link{Xenium}},
there are no images and thus slot @images of the \code{SpatialData} object is empty.
Furthermore, since there is nothing to align, there is no \emph{image} scale factor.
}

\section{SI units - scale factor \emph{pixel}}{

The pixel scale factor is used to transform the coordinates from pixel to SI units.
It is a numeric value that comes with an attribute which indicates the SI unit to
which the pixel value is scaled (e.g. mm / px). It is applied \strong{after} the coordinates
have been scaled to the image resolution.

\code{coords_df <- getCoordsDf(object)}

\code{psf <- getPixelScaleFactor(object)}

\code{coords_df$x_si <- coords_df$x * psf}

\code{coords_df$y_si <- coords_df$y * psf}

Note: Methods that do not include an image, often provide the coordinates already
in SI units. \code{\link{MERFISH}} coordinates, for instance, are already in micrometer units.
The \emph{pixel} scale factor therefore is \emph{1um/px}.

(The name \emph{pixel scale factor} has evolved historically, since SPATA2 was developed
with the Visium platform in mind. It does not fit perfectly for platforms such as
\code{\link{MERFISH}} or \code{\link{Xenium}} experiments since they do not provide an image. But
the SI unit system of SPATA2 works stable and we don't want to touch it. Therefore,
the name remains.)
}

\keyword{internal}
