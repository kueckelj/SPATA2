% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/r.R
\name{reduceResolutionVisiumHD}
\alias{reduceResolutionVisiumHD}
\title{Reduce resolution for Visium HD data}
\usage{
reduceResolutionVisiumHD(
  object,
  res_new,
  new_sample_name = "{sample_name}_redResHD",
  genes = getGenes(object),
  batch_size = 1000,
  workers = 1,
  verbose = NULL
)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{res_new}{\link[=concept_distance_measure]{Distance measure}.
The new spatial resolution in micrometers (um). It must
be lower than the current resolution and divisible by the current resolution.}

\item{new_sample_name}{Character string for the name of the new sample after
resolution reduction. Default is \code{"{sample_name}_redResHD"}. Given to \code{glue::glue()}
to create the final name.}

\item{genes}{Character vector specifying which genes to include in the reduced
object. Reducing the number of genes can dramatically spead up the process.
See \code{\link[=identifyVariableMolecules]{identifyVariableMolecules()}} and examples.}

\item{batch_size}{Integer specifying the number of spatial spots to process in each batch. Default is \code{1000}.}

\item{workers}{Integer specifying the number of parallel workers to use for processing. Default is \code{1},
which defaults to no parallel workers. If \code{2} or more, the \code{furrr} package
is required.}

\item{verbose}{Logical. If \code{TRUE}, informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}

\item{...}{Additional arguments passed to other methods.}
}
\value{
The updated input object, containing the added, removed or computed results.
}
\description{
This function reduces the spatial resolution of Visium HD data by aggregating spatial
spots into larger units, recalculating the count matrix, and generating a new \code{SPATA2}
object with the reduced resolution.
}
\details{
The \code{reduceResolutionVisiumHD()} function reduces the spatial resolution of a Visium HD
dataset by aggregating neighboring spots into larger units and recalculating the count
matrix for the new resolution. The process involves the following key steps:

\itemize{
\item \strong{Resolution check:} Ensures the new resolution (\code{res_new}) is greater
than the current resolution and is divisible by it.
\item \strong{Coordinate preparation:} Uses the \code{\link[=prepare_coords_df_visium_hd]{prepare_coords_df_visium_hd()}}
function to adjust the spatial coordinates, creating a grid where both row and
column counts are divisible by a factor derived from the resolution change. This
function also ensures equal row and column lengths and predicts missing coordinates.

\item \strong{Resolution reduction:} Applies the \code{\link[=reduce_coords_df_visium_hd]{reduce_coords_df_visium_hd()}}
function to aggregate the prepared coordinates at the new resolution. This function
groups the data by new barcodes, summarizes the spot counts, and calculates the
theoretical versus actual number of spots in each aggregated unit.

(Since tissue is rarely a perfect rectangle, the new grid of squares often
contains squares that, if located at the edge of the tissue, contain aggregated
data of the fewer resolution squares than if not located on the tissue edge. This
information is stored in the meta variables \emph{n_square_exp}, \emph{n_square_actual} and \emph{n_square_perc}.
See examples.)

\item \strong{Count matrix summarization:} The count matrix
is recalculated by \strong{summing} up the counts of each new square. This step is
optimized with parallel processing if multiple workers are specified.

\item \strong{SPATA2 object creation:} A new \code{SPATA2} object is generated
with the reduced resolution data, including updated spatial data and metadata.

}

The assignment of barcodes under high resolution and new barcodes under which
they have been aggrated is stored in a list in slot \code{object@obj_info$reduceResolutionVisiumHD$aggregated_barcodes}.
}
\note{
Only works on \code{SPATA2} object for \link[=SpatialMethod]{platform} \code{\link{VisiumHD}}.
}
\examples{
library(SPATA2)
library(SPATAData)

# download example object
object <- downloadSpataObject("HumanPancreasHD", update = FALSE)

# create the grid layer for visualization
grid_layer <- ggpLayerGridVisiumHD(object, res = "32um", line_size = 0.1, line_alpha = 0.1)

xrange <- c("9.25mm", "9.75mm")
yrange <- c("5.5mm", "6mm")

plotSurface(object, unit = "mm") +
  grid_layer +
  ggpLayerRect(object, xrange = xrange, yrange = yrange)

plotSurface(object, xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.1) +
  grid_layer +
  ggpLayerScaleBarSI(object, sb_dist = "32um", sb_pos = c("9.7mm", "5.75mm"), text_nudge_y = -7.5)

# identify top 100 genes for the sake of this example
object <- identifyVariableMolecules(object, method = "vst", n_mol = 100)
genes <- getVariableMolecules(object, method = "vst")

# reduce resolution
object_red <- reduceResolutionVisiumHD(object, res_new = "32um", genes = genes, workers = 4)

# show new position of aggregated squares
plotSurface(object_red, unit = "mm") +
  grid_layer +
  ggpLayerRect(object, xrange = xrange, yrange = yrange)

plotSurface(object_red, xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.2) +
  grid_layer +
  ggpLayerScaleBarSI(object, sb_dist = "32um", sb_pos = c("9.7mm", "5.75mm"), text_nudge_y = -7.5)

# show the percentage of squares
plotSurface(object_red, color_by = "square_perc", unit = "mm", limits = c(0, 100), oob = scales::squish) +
  ggpLayerRect(object, xrange = xrange, yrange = yrange)

# note how several new squares do not contain 4 but 3 to 1 spots due to the tissue edge
plotSurface(object, xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.1) +
  grid_layer +
  ggpLayerScaleBarSI(object, sb_dist = "32um", sb_pos = c("9.7mm", "5.75mm"), text_nudge_y = -7)

# visualize with 'square_perc' and compare
plotSurface(object_red, color_by = "square_perc", xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.2) +
  grid_layer +
  ggpLayerScaleBarSI(object, sb_dist = "32um", sb_pos = c("9.7mm", "5.75mm"), text_nudge_y = -7)

# filter if you want to
object_red_flt <- filterSpataObject(object_red, square_perc == 100)

plotSurface(object_red_flt, color_by = "square_perc")

# not filtered
plotSurface(object_red, color_by = "square_perc", xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.2) +
  grid_layer +
  labs(subtitle = "Not filtered")

# filtered
plotSurface(object_red_flt, color_by = "square_perc", xrange = xrange, yrange = yrange, unit = "mm", pt_size = 0.2) +
  grid_layer +
  labs(subtitle = "Filtered")

# reconstruct the aggregated barcode assignment
reconstructed_df <-
  purrr::imap_dfr(
    .x = object@obj_info$reduceResolutionVisiumHD$aggregated_barcodes,
    .f = ~ tibble::tibble(barcodes_aggr = .x, barcodes_red = .y)
  )

}
