% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/a.R
\name{alignImage}
\alias{alignImage}
\alias{alignImage,SPATA2-method}
\alias{alignImage,SpatialData-method}
\alias{alignImage,HistoImage-method}
\alias{alignImageAuto}
\alias{alignImageAuto,SpatialData-method}
\alias{alignImageInteractive}
\alias{alignImageInteractive,SPATA2-method}
\alias{alignImageInteractive,SpatialData-method}
\title{Align histology images}
\usage{
alignImage(object, ...)

\S4method{alignImage}{SPATA2}(
  object,
  img_name,
  opt = "set",
  angle = NULL,
  flip_h = NULL,
  flip_v = NULL,
  stretch_h = NULL,
  stretch_v = NULL,
  transl_h = NULL,
  transl_v = NULL
)

\S4method{alignImage}{SpatialData}(
  object,
  img_name,
  opt = "set",
  angle = NULL,
  flip_h = NULL,
  flip_v = NULL,
  stretch_h = NULL,
  stretch_v = NULL,
  transl_h = NULL,
  transl_v = NULL
)

\S4method{alignImage}{HistoImage}(
  object,
  opt = "set",
  angle = NULL,
  flip_h = NULL,
  flip_v = NULL,
  stretch_h = NULL,
  stretch_v = NULL,
  transl_h = NULL,
  transl_v = NULL
)

alignImageAuto(object, ...)

\S4method{alignImageAuto}{SpatialData}(
  object,
  img_name,
  step = 0.01,
  stop_at = 25,
  plot_progress = TRUE,
  verbose = TRUE
)

alignImageInteractive(object, ...)

\S4method{alignImageInteractive}{SPATA2}(object)

\S4method{alignImageInteractive}{SpatialData}(object, window_size = "800px")
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{...}{Used to absorb deprecated arguments or functions.}

\item{img_name}{Character value. The name of the image of interest.
If \code{NULL}, the \link[=concept_active]{active} image is chosen by default. Either way, must
be one of \code{\link[=getImageNames]{getImageNames()}}.}

\item{opt}{Character value. Either \emph{'add'} or \emph{'set'}. Decides whether the
input adjustments are added to the existing ones or set (replacing them).}

\item{angle}{Numeric value ranging between 0-359. Determines if/how much the image
is supposed to be rotated. Always rotates in \strong{clockwise} direction.}

\item{flip_h, flip_v}{Logical values. Determine if the image is supposed
to be flipped around the \strong{h}orizontal or \strong{v}ertical axis.}

\item{stretch_h, stretch_v}{Numeric values. Determine if and how the image
is supposed to be stretched along the \strong{h}orizontal or \strong{v}ertical axis.}

\item{transl_h, transl_v}{Numeric values. Determine if and how the
image is supposed to be translated along the \strong{h}horizontal or \strong{v}ertical
axis.}

\item{step}{Numeric value specifying the accuracy of the alignment
via vertical and horizontal translation. If \code{step >= 1}, it is interpreted
as a pixel value. For example, \code{step = 2} translates the image 2 pixels to the right,
then 4 pixels to the right, and so on. If \code{step < 1}, the final step value is
calculated as \code{round(side.length * step, digits = 0)} where \code{side.length} is
equal to the height and width of the \strong{reference} image. See details for more.}

\item{verbose}{Logical. If \code{TRUE}, informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}

\item{stop_after}{Numeric value specifying the maximum number of consecutive iterations
during optimization of the image translation without improvement. If \code{stop_at >= 1}, it
is interpreted as an absolute number of attempts. For instance, setting
\code{stop_after = 25} makes the function stop after 25 iterations without any improvement.
If \code{stop_at < 1}, the maximum number of consecutive iterations without any improvement
allowed is calculated by the total number of translations possible times \code{stop_at}.
See details for more.}
}
\value{
The updated input object, containing the added, removed or computed results.
}
\description{
Aligns an image with the reference image. See details for
more information about the process.
}
\details{
The transformations required to align image X with the reference
image are stored as \emph{instructions} in the \code{\link{HistoImage}} container of the
respective image. More precisely, in slot @transformations. The image itself
remains as is after being \code{\link[=loadImage]{loaded}}. The transformations
are applied upon extraction of the image. Use \code{\link[=getImageTransformations]{getImageTransformations()}} to
otbain the instructions currently stored.
}
\examples{

library(SPATA2)
library(tidyverse)

data("example_data")

object <- example_data$object_UKF275T_diet


# ----- prepare
library(SPATA2)
library(EBImage)
library(tidyverse)

data("example_data")

object <- example_data$object_UKF275T_diet

img_bad <-
  getImage(object) \%>\%
  translate(v = c(25, 20), bg.col = "green")

#----- opt = "set" (the default)
object <- registerImage(object, img = img_bad, img_name = "bad", overwrite = T)
object <- activateImage(object, img_name = "bad")

plotSurface(object, pt_clr = "red", display_image = T)

object <- alignImage(object, img_name = "bad", opt = "set", transl_h = -25, transl_v = -20)

plotSurface(object, pt_clr = "red", display_image = T)

#----- opt = "add"
object <- registerImage(object, img = img_bad, img_name = "bad", overwrite = T)
object <- activateImage(object, img_name = "bad")

plotSurface(object, pt_clr = "red", display_image = T)

object <- alignImage(object, img_name = "bad", opt = "add", transl_h = -15, transl_v = -10)

plotSurface(object, pt_clr = "red", display_image = T)

object <- alignImage(object, img_name = "bad", opt = "add", transl_h = -10, transl_v = -10)

plotSurface(object, pt_clr = "red", display_image = T)

# ----- interactive

if(FALSE){ # diffused, run separately

  object <- alignImageInteractive(object)

}

}
\keyword{internal}
