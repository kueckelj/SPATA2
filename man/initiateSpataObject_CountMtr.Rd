% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initiateSpataObject.R
\name{initiateSpataObject_CountMtr}
\alias{initiateSpataObject_CountMtr}
\title{Initiate a spata-object from a raw count matrix}
\usage{
initiateSpataObject_CountMtr(
  coords_df,
  count_mtr,
  feature_df = NULL,
  sample_name,
  image = NULL,
  image_class = "HistologyImage",
  image_object = NULL,
  directory_spata = NULL,
  directory_seurat = NULL,
  combine_with_wd = FALSE,
  gene_set_path = NULL,
  SCTransform = FALSE,
  NormalizeData = list(normalization.method = "LogNormalize", scale.factor = 1000),
  FindVariableFeatures = list(selection.method = "vst", nfeatures = 2000),
  ScaleData = TRUE,
  RunPCA = list(npcs = 60),
  FindNeighbors = list(dims = 1:30),
  FindClusters = list(resolution = 0.8),
  RunTSNE = TRUE,
  RunUMAP = list(dims = 1:30),
  verbose = TRUE
)
}
\arguments{
\item{coords_df}{Data.frame containing information about the positions of all
barcode-spots in form of a numeric \emph{x}- and \emph{y}-variable. The key-variable
\emph{barcodes} needs to be of type character and must be identical to the column names
of the input matrix (\code{expr_mtr}).}

\item{count_mtr}{A numeric matrix to be used as the count matrix. Rownames must
correspond to the genes and column names must correspond to the barcodes.}

\item{sample_name}{Character value. Denotes the name of the sample you are
analyzing with the spata-object. The future input for SPATA's \code{of_sample}-argument.}

\item{image}{An Image of the sample that can be displayed as the surface plot's background.}

\item{gene_set_path}{Character value (or NULL). Specifies the path to a
.RDS-file containing a data.frame that is to be used as input for slot @used_genesets.

Must have the character-variables

\itemize{
\item{\emph{'ont'}: The gene set names.}
\item{\emph{'gene'}: The belonging gene names.}
}

If set to NULL the default gene-set data.frame will used. Run \code{?gsdf} to get more information.}

\item{SCTransform}{A named list of arguments given to \code{Seurat::SCTransform()}, TRUE or FALSE.}

\item{NormalizeData}{A named list of arguments given to \code{Seurat::NormalizeData()}, TRUE or FALSE.}

\item{FindVariableFeatures}{A named list of arguments given to \code{Seurat::FindVariableFeatures()}, TRUE or FALSE.}

\item{ScaleData}{A named list of arguments given to \code{Seurat::ScaleData()}, TRUE or FALSE.

Hint: If set to TRUE or the argument-list provided does not specify the argument \code{features} input
for argument \code{features} is set to \code{base::rownames(seurat_object)}.}

\item{RunPCA}{A named list of arguments given to \code{Seurat::RunPCA()}, TRUE or FALSE.}

\item{FindNeighbors}{A named list of arguments given to \code{Seurat::FindNeighbors()}, TRUE or FALSE.}

\item{FindClusters}{A named list of arguments given to \code{Seurat::FindClusters()}, TRUE or FALSE.}

\item{RunTSNE}{A named list of arguments given to \code{Seurat::RunTSNE()}, TRUE or FALSE.}

\item{RunUMAP}{A named list of arguments given to \code{Seurat::RunUMAP()}, TRUE or FALSE.}
}
\value{
A spata-object.
}
\description{
Default function for any spatial related experiment whoose spata-objects are initiated with
a raw count matrix. See details for more information.
}
\details{
The loading and preprocessing of the spata-object  currently relies on the Seurat-package. Before any pre processing function is applied
mitochondrial and stress genes are discarded. For more advanced users the arguments above starting with a capital letter allow to
manipulate the way the spata-object is processed. For all of these arguments apply the following instructions:

\itemize{
\item{If set to FALSE the processing function is skipped.}
\item{If set to TRUE the respective function is called with it's default argument settings. Note: \code{RunUMAP()} needs
additional input!}
\item{If a named list is provided the respective function is called whereby the named list will provide the argument-input (the seurat-object to be constructed must not be named and will be
passed to every function as the first argument!!!.)}
}

Note that certain listed functions require previous functions! E.g. if \code{RunPCA} is set to FALSE \code{RunTSNE()}
will result in an error. (\code{base::tryCatch()} will prevent the function from crashing but the respective slot
is going to be empty.) Skipping functions might result in an incomplete spata-object.
}
