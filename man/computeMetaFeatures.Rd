% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/c.R
\name{computeMetaFeatures}
\alias{computeMetaFeatures}
\title{Compute meta features}
\usage{
computeMetaFeatures(
  object,
  assay_name = activeAssay(object),
  overwrite = FALSE
)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{assay_name}{Only relevant if the \code{SPATA2} object contains more than
one assay: Denotes the assay of interest and thus the
\link[=concept_molecular_modalities]{molecular modality} to use. Defaults to the active assay
as set by \code{\link[=activateAssay]{activateAssay()}}.}

\item{overwrite}{Logical value. Must be \code{TRUE} to allow overwriting.}
}
\value{
The updated input object, containing the added, removed or computed results.
}
\description{
This function computes various meta features for the specified
assay in the \code{SPATA2} object and adds them to the object's metadata.
}
\details{
This function computes the following meta features for each observation in the specified assay.
The computed features are added to the metadata of the SPATA2 object with the following naming conventions:

\itemize{
\item \code{n_counts_<assay_name>}: The total number of counts for each observation.
\item \code{n_distinct_<assay_name>}: The number of distinct molecules (non-zero entries) for each observation.
\item \code{avg_cpm_<assay_name>}: The average counts per molecule for each observation, computed as the total number of counts divided by the number of distinct molecules.
}

If the \code{overwrite} parameter is set to TRUE, existing features with the same names will be overwritten.
Otherwise, the function will check for the presence of existing features and will not overwrite them unless
explicitly instructed to do so.
}
\examples{

library(SPATA2)

object <- loadExampleObject("UKF269T")

getAssayNames(object)

getMetaDf(object)

object <- computeMetaFeatures(object, asay_name = "gene")

getMetaDf(object)

plotSurface(object, color_by = "n_counts_gene")


}
