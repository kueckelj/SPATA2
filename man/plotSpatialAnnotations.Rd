% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plotN-S.R
\name{plotSpatialAnnotations}
\alias{plotSpatialAnnotations}
\alias{plotSpatialAnnotations,SPATA2-method}
\alias{plotSpatialAnnotations,SpatialData-method}
\title{Plot spatial annotations}
\usage{
plotSpatialAnnotations(object, ...)

\S4method{plotSpatialAnnotations}{SPATA2}(
  object,
  ids = NULL,
  tags = NULL,
  test = "any",
  expand = "25\%",
  square = TRUE,
  outline = TRUE,
  inner = TRUE,
  unit = getSpatialMethod(object)@unit,
  round = 2,
  line_color = "black",
  line_size = 1.5,
  line_type = "solid",
  fill = "orange",
  alpha = 0.25,
  sb_dist = FALSE,
  display_title = FALSE,
  display_subtitle = TRUE,
  display_caption = FALSE,
  ggpLayers = list(),
  nrow = NULL,
  ncol = NULL,
  plot = TRUE,
  ...
)

\S4method{plotSpatialAnnotations}{SpatialData}(
  object,
  ids = NULL,
  tags = NULL,
  test = "any",
  expand = "25\%",
  square = TRUE,
  outline = TRUE,
  inner = TRUE,
  unit = getSpatialMethod(object)@unit,
  round = 2,
  line_color = "black",
  line_size = 1.5,
  line_type = "solid",
  fill = "orange",
  alpha = 0.25,
  sb_dist = FALSE,
  display_title = FALSE,
  display_subtitle = TRUE,
  display_caption = FALSE,
  ggpLayers = list(),
  nrow = NULL,
  ncol = NULL,
  plot = TRUE,
  ...
)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{...}{Additional arguments given to \code{ggpLayerScaleBarSI()} if input for
\code{sb_dist} is a valid distance measure. Exception: \code{xrange} and \code{yrange} are
set to the ranges of the image that was cropped to display the spatial annotation.}

\item{ids}{Character vector or \code{NULL}. If character, specifies the IDs
of the image annotations of interest. If numeric, the image annotations are picked by number.
If \code{NULL}, all image annotations are included - subsequent selection with \code{tags} and
\code{test} is possible.}

\item{tags}{Character vector or \code{NULL}. If character, the tags for the image annotation
selection. See section \emph{Selection of spatial annotations} for more information.}

\item{test}{Character value. One of \emph{c('any'. 'all', 'identical', 'not_identical', 'none')}.
Specifies how input for \code{tags} is used to select spatial annotations.
See section \emph{Selection of spatial annotations} for more information.}

\item{expand}{Specifies image expansion. An image that is cropped based on an image
annotation centers around the image annotation. If \code{expand = 0}, the default, the dimensions of the image,
that is width/x-axis and height/y-axis, are set to include only the image annotation area
and nothing more. Using \code{expand}, the cropped image section can be adjusted. See section
\emph{Expansion of cropped image sections} for more information.}

\item{square}{Logical value. Most image annotations come in variable shapes and
have different horizontal and vertical diameters. Therefore, height and width of the image
section are usually not equal. If \code{square = TRUE}, the cropped section of the image that
contains the annotated structure is forced into a square: the bigger diameter of both is taken
as default. E.g. if the horizontal diameter of the image annotation is 1mm and the
vertical diameter is 1.5mm, the output image will have height and width of 1.5mm. That is,
in terms of coordinates, an x-range and a y-range of 1.5mm.

Processing of the image output depending on argument \code{expand} happens afterwards.}

\item{outline}{Logical value. If TRUE, a polygon is drawn around the
exact extent of the annotated structure.}

\item{inner}{Logical value. Only applies if an image annotation contains a secondary image annotation within its own area. If \code{FALSE}, the inner borders of the image annotation
are not included in the output.}

\item{unit}{Character value. The unit in which the x- and y-axis text
are displayed. Use \code{validUnitsOfLengthSI()} to obtain all valid input options.}

\item{round}{Numeric value or \code{FALSE}. If numeric and \code{unit} is not \emph{px}, rounds
axes text.}

\item{line_color}{Character. Affects color of the main lines of the plot.}

\item{line_size}{Numeric. Affects size of the main lines of the plot.}

\item{line_type}{Character. The line type. One of \emph{'blank'}, \emph{'solid'},
\emph{'dashed'}, \emph{'dotted'}, \emph{'dotdash'}, \emph{'longdash'} and \emph{'twodash'}.}

\item{sb_dist}{Distance measure or \code{FALSE}. If distance measure,
defines the distance in SI units that a scale bar illustrates.
Scale bar is plotted with \code{ggpLayerScaleBarSI()}. If \code{FALSE},
no scale bar is plotted.}

\item{display_title}{Logical value. If TRUE, the number of each spatial annotation
is plotted in the title.}

\item{display_subtitle}{Logical value. If TRUE, the ID of each spatial annotation
is plotted in the subtitle.}

\item{display_caption}{Logial value. If TRUE, the tags of each spatial annotation
are plotted in the caption.}

\item{ggpLayers}{List of \code{ggproto}-objects that are added to each plot.
Skim \code{ggpLayer*()}-functions for more options.}

\item{nrow, ncol}{Numeric values or NULL. Used to arrange multiple plots.}

\item{plot}{Logical value. If TRUE, the plots are plotted immediately
via \code{gridExtra.grid.arrange()} and the list of plots is returned
invisibly. Else the list of plots is simply returned.}
}
\value{
A list of ggplots. Each slot contains a plot
that visualizes an spatial annotation.
}
\description{
Plots image sections containing the areas that were annotated via
\code{\link[=createGroupAnnotations]{createGroupAnnotations()}}, \code{\link[=createImageAnnotations]{createImageAnnotations()}} or
\code{\link[=createNumericAnnotations]{createNumericAnnotations()}} .
}
\details{
At first, the image section that contains the spatial annotation is
cropped such that it only contains the extent of the polygon that represents
the borders of the annotation (ranges can be obtained with \code{getSpatAnnRange()}).
Using arguments \code{square} and \code{expand} can be used to expand the displayed
image section individually.
}
\section{Distance measures}{


The vignette on distance measures in SPATA2 has been replaced. Click
\code{\link[=concept_distance_measure]{here}} to read it.
}

\section{Expansion of cropped image sections}{


The argument \code{expand} is a versatile way, to specify how a cropped
image section is extracted. If you want the cropped image as is, specify
\code{expand = 0}. Else, there are multiple options. In general, \code{expand} takes
three kinds of values, namely percentages, distances and distance exclamations.

\itemize{
\item{Percentage:}{ A string suffixed with \emph{\%}. E.g. \code{expand = '50\%'}
adds 50\% of the distance from the center to the border of the image annotation
to the image frame.}
\item{Distance measures:}{ In pixel or European units of length. E.g. \code{expand =  list(x = '1mm')}
expands the x-axis on both sides with 1mm. \verb{expand = list(x = c('0.5mm', 1.5mm')}
expands the x-axis on the left side with 0.5mm and on the right side with 1.5mm.}
\item{Exclam distance measures:}{ Distance measure with an exclamation mark
suffix. E.g. \code{expand = '1mm!'} centers the image and forces an axis length of
1 millimeter. (Example 5) }
}

Depending on how the values are specified different parts of the image can be
expanded.

Single values, like \code{expand = 50}, are recycled: Every end of each image axis
is expanded by 50 pixel. (Example 2)

Vectors of length two, like \code{expand = c('1mm', '2mm')}, are recycled: The beginning
of each axis is expanded by 1 millimeter. The end of each axis is expanded by
2mm. (Example 3)

Named lists can be more precise. \code{expand = list(x = c('1mm', '0.5mm'), y = c('0.25mm', '1mm'))}.
Applies the vectors to expand the corresponding axis. (Example 4)

Using exclam input the side of the axis must not be specified as the
axis is fixed as a whole. E.g \code{expand = list(x = '1mm!', y = '2mm!')} results
in the same output as \verb{expand = list(x = c('1mm!', '1mm!'), y = c('2mm!', '2mm!')}.
}

\section{Selection of spatial annotations}{


Selection of spatial annotations via the arguments \code{ids}, \code{class}, \code{tags} and
\code{test} works in three steps:

First, if \code{ids} is a character it prefilters the annotations by ID and only
the specified ones are submitted to the next steps. If it is \code{NULL}, all
annotations are submitted to the next steps.

Secondd, if \code{class} is a character it filters the annotations remaining
after the first step by their class. If \code{NULL}, the step is skipped.

Third, if \code{tags} is a character it is used in combination with \code{test} to select
from the spatial annotations that remain after the second step based on the meta data
they are tagged with. There are multiple options:
\enumerate{
\item Argument \code{test} set to \emph{'any'} or \emph{1}: To be included, an image annotation
must be tagged with at least one of the input tags.
\item Argument \code{test} set to \emph{'all'} or \emph{2}: To be included, an image annotation
must be tagged with all of the input tags. Can contain tags that are not specified.
\item Argument \code{test} set to \emph{'identical'} or \emph{3}: To be included, an image annotation
must be tagged with all of the input tags. Can not be tagged with anything else.
\item Argument \code{test} set to \emph{not_identical} or \emph{4}: To be included, an image
annotation must \strong{not} be tagged with the combination of input tags.
\item Argument \code{test} set to \emph{'none'} or \emph{5}: To be included, an image annotation
must \strong{not} contain any of the input tags.
}

If \code{tags} is \code{NULL}, the step is skipped. Therefore, if \code{ids}, \code{class} and \code{tags}
are all NULL, which is the default, all annotations are selected as all subsetting
steps are skipped. Eventually, the remaining spatial annotations are submitted to
whatever the respective function does.
}

\examples{

library(SPATA2)
library(SPATAData)

object <- downloadSpataObject(sample_name = "275_T", verbose = FALSE)

data("image_annotations")

object <- setSpatialAnnotations(object, spat_anns = image_annotations[["275_T"]])

plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = "0.5mm",
 encircle = T # no encircling possible if expand = 0
 )

### Example 1

plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = 0,
 encircle = FALSE # no encircling possible if expand = 0
 )

 process_expand_input(0)

### Example 2
plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = 50, # all sides are expanded with 50px -> 100px gain per axis
 encircle = TRUE
 )

 process_expand_input(50)

### Example 3
plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = c("1mm", "2mm"),
 encircle = TRUE
 )

 process_expand_input(c("1mm", "2mm"))

### Example 4
plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = list(x = c('1mm', '0.5mm'), y = c('0.25mm', '1mm')),
 encircle = TRUE
 )

 process_expand_input(list(x = c('1mm', '0.5mm'), y = c('0.25mm', '1mm')))


### Example 5
plotSpatialAnnotations(
 object = object,
 ids = "spat_ann_1",
 expand = "1mm!", # center image and force axis length of 1mm
 encircle = TRUE,
 dist_sb = "100um",
 text_color = "white",
 sgmt_color = "white",
 pos = "bottom_right",
 )

 process_expand_input("1mm!")


}
\seealso{
\code{\link[=getSpatialAnnotations]{getSpatialAnnotations()}}
}
