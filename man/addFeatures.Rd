% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add.R
\name{addFeatures}
\alias{addFeatures}
\title{Add meta features}
\usage{
addFeatures(
  object,
  feature_df,
  feature_names = NULL,
  key_variable = "barcodes",
  overwrite = FALSE,
  verbose = NULL,
  ...
)
}
\arguments{
\item{object}{An object of class \code{\link{SPATA2}} or, in case of S4 generics,
objects of classes for which a method has been defined.}

\item{feature_df}{A data.frame that contains a variable called \emph{barcodes} as well
as the variables that are to be joined.}

\item{feature_names}{Character vector or \code{NULL}. Determines which feature variables
to add. See details for more.}

\item{overwrite}{Logical value. Must be \code{TRUE} to allow overwriting.}

\item{verbose}{Logical. If set to TRUE informative messages regarding
the computational progress will be printed.

(Warning messages will always be printed.)}

\item{...}{Used to absorb deprecated arguments or functions.}
}
\value{
The updated input object, containing the added, removed or computed results.
}
\description{
Adds new externally generated \link[=concept_variables]{features}
to the \code{SPATA2} object's meta data.
}
\details{
If you are only interested in adding specific features to the \code{SPATA2} object
you can specify those with the \code{feature_names}-argument. If no variables
are specified this way all variables found in \code{feature_df} for argument
\code{feature_df} are taken. (Apart from variables called \emph{barcodes, sample, x} and \emph{y}).

Eventually the new features are joined via \code{dplyr::left_join()} over the
key-variables \emph{barcodes} or \emph{x} and \emph{y}. Additional steps secure
the joining process.
}
\examples{
library(SPATA2)
library(tidyverse)

data("example_data")

object <- example_data$object_UKF275T_diet

meta_df <- getMetaDf(object)

names(meta_df)

new_meta_df <-
 dplyr::transmute(
   .data = meta_df,
   barcodes = barcodes,
   new_feat = sample(letters[1:5], size = nrow(meta_df), replace = T) \%>\% as.factor()
   )

object <- addFeatures(object, feature_df = new_meta_df)

plotSurface(object, color_by = "new_feat")
}
